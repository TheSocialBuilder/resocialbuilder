%a{:name => "section_10_0"}
.section
  %h1 10.0 - Icons
  %p Naming Conventions, and Folder Organization for icons on used on all projects
  
  %h3 Naming Conventions:
  
  %p The consistent use of the following naming conventions makes the code generated easier to understand. The naming conventions provide you with information about the icon. This facilitates understanding of the structure of a large project.
  
  %p 
    Use correct full english grammer words, names must be descriptive that at first glance without looking at the icon you know exactly what that icon is. 
    .example
      Ex: You have an icon that is showing a arrow that is pointing to the right.
      %ul
        %li arrow.png = BAD, Where is this icon pointing to?
        %li arrow_1.png = BAD, What is 1?
        %li arrow_r.png = BAD, What is r?
        %li arrow_right.png = GOOD, I bet this arrow points to the right!
  
  %p 
    Spaces in name must be replaced with underscore
    .example
      %ul
        %li arrowright.png = BAD
        %li arrow_right.png = GOOD

  %p 
    Name must be all lowercase
    .example
      %ul
        %li Arrow_Right.png = BAD
        %li arrowRight = BAD
        %li arrow_right = GOOD

  %p 
    Do not use icon_, image_, or any prefix that does not need to be present.
    .example
      The generated code from the sprite engine will append the correct prefix automatically
      %ul
        %li icon_arrow_right.png = BAD, Their is no need for the icon_
        %li arrow_right = GOOD

  %p 
    Matching icons that have an action (on hover, if selected, etc)
    .example
    
      You have a star icon that on default view is grey, when you hover over this image you want a new yellow star icon to display
      %ul
        %li star_grey.png to represent the default view
        %li star_yellow.png to represent the hover view
        %li Naming it star_grey.png and star_grey_hover.png you are allowing both icons to be used in multiple locations

  %p 
    If icon needs a left, right, top, or bottom always place this at the end
    .example
      %ul
        %li right_arrow.png = BAD
        %li arrow_right.png = GOOD


  %p 
    Colors in name
    .example
      %ul
        %li blue_car.png = BAD
        %li car_blue.png = GOOD, this allows the most descriptive word to be used
   
  %p 
    Do not use numbers in name, if you have 2 icons that are a bit identical, break it down think about what you can see different between the two and use that. This will promote the best naming and imagination.
    .example
      You have 2 envelope icons that are fairly close
      %ul
        %li envelope_open.png
        %li envelope_closed.png
    .alert.error
      Do not place dimension sizes in name. ( Ex. house_16.png ) See Folder Organization


  %hr


  
  %h3 Folder Organization:
  %p For the sprite system to properly name image sprites, and CSS class names they MUST follow a specific pattern
  
  %p All icons will be saved under the directory /app/assets/images/icons/
  
  %p Separate icons specifically by image dimensions
  .example
    Lets say that you have 50 icons, for each of those icons you have 3 different sizes 16x16, 32x32, 64x64
    %ul
      %li Place all 16x16 icons under /app/assets/images/icons/icon_16
      %li Place all 32x32 icons under /app/assets/images/icons/icon_32
      %li And so on... 
    .alert.error
      If you have a icon that does not have matching dimensions use the directory /app/assets/images/icons/icon 
    
  %hr
  %h3 How to use:
  %p You have a icon that is called star.png located under /app/assets/images/icons/icon_16 if correctly named and placed in correct folder you can use the CSS class="icon_16 star"
  
  = styleguide_block '10.1' do
    .icon{:class => "$modifier_class"} 
    $modifier_class

  = styleguide_block '10.2' do
    .icon_16{:class => "$modifier_class"} 
    $modifier_class

  = styleguide_block '10.3' do
    .icon_32{:class => "$modifier_class"} 
    $modifier_class

  -# = styleguide_block '9.1' do
  -#   %span.label{:class => "$modifier_class"} Inline Label